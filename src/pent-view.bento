/**  pent-view.bento
 *
 *   View components for Pent.
 *
 *
 **/

site pent [=

    /---- site-level view options ----/
    
    int STANDARD_MODE = 0
    int TEXT_MODE = 1

    int view_mode(int mode) = mode 

    /---- session state ----/

    piece last_viewed_piece(piece p) = p
    
    

    /---- the view of views ----/
    
    dynamic response view [=

        dynamic response piece(params{}) [=
            //log("view piece params: " + params);
            //log("   ...id: " + piece_id); 

            int piece_id = (int) params{"id"}
            pent.piece param_piece = (params{"name"} ? piece_table{params{"name"}} : piece_for_id(piece_id)) 
            if (param_piece) [=
                piece_view(param_piece);
                eval(last_viewed_piece(: param_piece :));
            =] else if (last_viewed_piece) [=
                piece_view(last_viewed_piece);
            =] else [=
                piece_view(utah);
                eval(last_viewed_piece(: param_piece :));
            =]
        =]
    =]


show_piece [=
    piece param_piece = piece_for_id(2);
    log("showing " + param_piece.name);
    piece_view(param_piece);
=]

    /---- piece attributes ----/


    /---- view components ----/

    component pent_view [=
        component_class = "view " + owner.type
        
        int x [?]
        int y [?]
    =]

    dynamic pent_view team_view(team_name, pent_team team, pent_team_played played) [=

        if (view_mode == TEXT_MODE) [=
            
        
        =] else [=
        
        
        =]    
     =]
    
    dynamic pent_view set_view(piece[] removed) [=
    
    =]
    
    
    dynamic pent_view board_view(pent_game game) [=
    
    
    =]

    dynamic pent_view piece_view(piece p) [=
        if (TEXT_MODE) [=
           piece_serializer(p).serialize;
        
        =] else [=
        
        
        =]
        
    
    =]

    /---- serializers ----/
    dynamic serializable(*) piece_serializer(str), (piece p) [=
        keep: int id        = p.id
        keep: name          = p.name
        keep: classic_name  = p.classic_name
        keep: int value     = p.value
        keep: int rotations = p.rotations
        keep: int chirality = p.chirality
        keep: int width     = p.width
        keep: int height    = p.height
    =]
    
pser [=
    piece_serializer(utah).serialize;
=]    
    
=]
