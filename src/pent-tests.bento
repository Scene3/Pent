/**  bentodev_tests.bento
 *
 *   Tests for Bento web site.
 *
 **/

site pent [=

    test_runner[] test_runners = [ pent_model_tests ]
    

    page(*) tests(params{}) [=
        boolean needs_login = false
        boolean needs_admin = false    
        boolean show_menu = false

        label = "Tests"
    
        [| <h2>Test Results</h2> |]

        /--- run all the tests in the test runner list ---/
        for test_runner tr in test_runners [=                
        
            [| <strong>[= tr.name; =]<strong><ol> |]
            
            tr.run;
        
            for test_result rslt in tr.results [=
                [| <li>Name: [= rslt.name; =]<br>
                      Passed: [= rslt.result; =]<br>
                      log:<ul>
                |]
                for msg in rslt.messages [|
                    <li>[= msg; =]</li>
                |]
                [| </ul></li> |]                
            =]
            [| </ol> |]
        =]
    =]

    test_runner pent_model_tests [=
    
        test_base test_pieces [=
            expected = "ABC"
            
            int num_problems(int n) = n
            
            for piece p in pieces [=
                if (p.protos.count != p.rotations * p.chirality) [=
                    eval(num_problems(: num_problems + 1 :));
                =]
            =]
            
            if (!num_problems) [=
                test_log("all pieces have correct number of protos");
                "A";
            =] else [=
                if (num_problems == 1) [=
                    test_log("one piece has incorrect number of protos");
                =] else [=
                    test_log(num_problems + " pieces have incorrect number of protos");
                =]
                eval(num_problems(: 0 :));
            =]

            for piece p in pieces [=
                if (p.all_positions.count != p.num_positions) [=
                    test_log("piece " + p.id + " num positions should be " + p.num_positions + " but is " + p.all_positions.count);
                    eval(num_problems(: num_problems + 1 :));
                =]
            =]
                
            if (!num_problems) [=
                test_log("all pieces have correct number of positions");
                "B";
            =] else [=
                if (num_problems == 1) [=
                    test_log("one piece has incorrect number of positions");
                =] else [=
                    test_log(num_problems + " pieces have incorrect number of positions");
                =]
                eval(num_problems(: 0 :));
            =]
            
            pent_position pos_accumulator(pent_position pos) = pos
            pent_position full_plus = [ #7E, #FF, #FF, #FF, #FF, #FF, #FF, #7E ]
            
            for piece p in pieces [=
                eval(pos_accumulator(: empty_board :));
                for pent_position pos in p.all_positions [=
                    eval(pos_accumulator(: pos_accumulator | pos :));
                =]
                
                if (p.id != PLUS_ID) [=
                    if (pos_accumulator != full_board) [=
                        test_log("all_positions incorrect for piece " + id);
                        eval(num_problems(: num_problems + 1 :));
                    =]
                =] else [=
                    if (pos_accumulator != full_plus) [=
                        test_log("all_positions incorrect for plus");
                        eval(num_problems(: num_problems + 1 :));
                    =]
                =]
            
            =]
            if (!num_problems) [=
                test_log("all pieces have correct all_positions");
                "C";
                eval(num_problems(: 0 :));
            =]
            
        =]
        
        test_base, pent_board test_board_testers [=
            expected = "ABCDEF"
        
            // empty board
            pent_position z = [ 0, 0, 0, 0, 0, 0, 0, 0 ]
        
            // three squares.  a and b overlap, so do b and c.  a and c do not
            
            pent_position a = [ #C0, #C0, 0, 0, 0, 0, 0, 0 ]
            pent_position b = [ 0, #60, #60, 0, 0, 0, 0, 0 ]
            pent_position c = [ #30, #30, 0, 0, 0, 0, 0, 0 ]

            // test is_empty
            if (is_empty(z)) [=
                "A";
            =] else [=
                test_log("is_empty failed on empty position");
            =]
            if (!is_empty(a) && !is_empty(b) && !is_empty(c)) [=
                "B";
            =] else [=
                test_log("is_empty failed on non-empty position");
            =]
            
            // test is_hit
            if (is_hit(a, b) && is_hit(b, c)) [=
                "C";
            =] else [=
                test_log("is_hit failed to detect hit with overlapping positions");
            =]
            if (is_hit(a, a) && is_hit(b, b) && is_hit(c, c)) [=
                "D";
            =] else [=
                test_log("is_hit failed to detect hit with self");
            =]
            if (!is_hit(a, z) && !is_hit(b, z) && !is_hit(c, z) && !is_hit(z, z)) [=
                "E";
            =] else [=
                test_log("is_hit detected impossible hit (on empty)");
            =]
            if (!is_hit(a, c)) [=
                "F";
            =] else [=
                test_log("is_hit detected nonexistent hit (positions do not overlap)");
            =]
        =]
    =]
    
    /------ informal tests ------/
    
    page show_all_positions(params{}) [=
    
        piece p = (params{"piece"} ? params{"piece"} : pieces[0])
       
        p.name;
        br; br; 
        [| <ol> |]
        for pent_position pos in p.all_positions [=
            [| <li> |]
            pos;
            [| </li> |]
        =]
        [| </ol> |]
    =]
    
    show_a_pos [=
        utah.all_positions[0];
    =]
    
    show_num_pos [=
        for piece p in pieces [=
            "id: ";
            p.id;
            "   num positions: ";
            p.num_positions;
            br;
        =]
    =]
=]
