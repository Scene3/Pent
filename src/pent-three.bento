/**  pent-three.bento
 *
 *   3D visualization for Pent.
 *
 *
 **/

site pent [=

    adopt three


    /--- initialization ---/
    
    three_init [=
        
    =]

    three_session_init [=
        current_theme(: default_theme :);
    =]

    /--- themes ---/
    
    pent_theme [=
        this material [?]
        int tile_width [?]
        int tile_depth [?]    
    =]

    pent_theme default_theme [=
        this material = blue_material
        int tile_width = 10
        int tile_depth = 4    
    =]
    
    pent_theme current_theme(pent_theme theme) = theme


    /--- positions ---/
    



    /--- camera ---/
    
    dynamic perspective_camera pent_cam [=
        position pos = position(0, 2, 50)
        name = "pent_camera"
        position target = position(0, 2, 0)

        far(2000);    /--- 1.5 * backdrop.horizon); ---/
        [|
            [= name; =].target = [= target; =]
        |]
        sub;
    =]


    /--- materials ---/

    phong_material blue_material [=
        undecorated color = 0x3333CC
    =]
    
    
    /--- objects ---/
    
    composite_object piece_object(pent_theme pt, piece p) [=
        pent_position proto = p.protos[0]
        
        pent_position[] row_masks = [ 
            [ #FF, 0, 0, 0, 0, 0, 0, 0 ],
            [ 0, #FF, 0, 0, 0, 0, 0, 0 ],
            [ 0, 0, #FF, 0, 0, 0, 0, 0 ],
            [ 0, 0, 0, #FF, 0, 0, 0, 0 ],
            [ 0, 0, 0, 0, #FF, 0, 0, 0 ],
            [ 0, 0, 0, 0, 0, #FF, 0, 0 ],
            [ 0, 0, 0, 0, 0, 0, #FF, 0 ],
            [ 0, 0, 0, 0, 0, 0, 0, #FF ]
        ]
            
        pent_position[] col_masks = [ 
            [ #80, #80, #80, #80, #80, #80, #80, #80 ],
            [ #40, #40, #40, #40, #40, #40, #40, #40 ],
            [ #20, #20, #20, #20, #20, #20, #20, #20 ],
            [ #10, #10, #10, #10, #10, #10, #10, #10 ],
            [ #08, #08, #08, #08, #08, #08, #08, #08 ],
            [ #04, #04, #04, #04, #04, #04, #04, #04 ],
            [ #02, #02, #02, #02, #02, #02, #02, #02 ],
            [ #01, #01, #01, #01, #01, #01, #01, #01 ]
        ]
            
        dynamic boolean has_tile(pent_position piece_proto, int col, int row) = !is_empty(piece_proto & row_masks[row] & col_masks[col]) 

        three_object[] objs = [ for int r from 0 to p.height [=
                                    for int c from 0 to p.width [=
                                        if (has_tile(proto, c, r)) [=
                                            piece_tile(pt, c, r)
                                        =]  
                                    =]
                                =]
                              ]  
    =]
    
    
    dynamic mesh piece_tile(pent_theme pt, int col, int row) [=
        dynamic name = "tile_" + row + "_" + col         
        geometry geo = box_geometry(pt.tile_width, pt.tile_depth, pt.tile_width)
        material mat = pt.material
        position pos = position((col - 1) * pt.tile_width, 2, (row - 1) * pt.tile_width)
    =]
    
     
    /--- lights ---/

    object_group light_group [=
    
        point_light(0xFF5555) bright_red_light [=
            position pos = position(20, 23, 20)
        =]
    
        point_light(0x55FF55) bright_green_light [=
            position pos = position(-20, 23, 20)
        =]
    
        point_light(0x5555FF) bright_blue_light [=
            position pos = position(0, 33, -10)
        =]
    
        point_light(0xEEEE55) bright_yellow_light [=
            position pos = position(0, 33, 10)
        =]
    
        ambient_light(0x111111) soft_white_light [=
            position pos = position(0, 100, 0)
        =]
    =]

    object_group set_of_pieces [=
        piece_object(current_theme, utah) utah_piece [/]
    
        next_frame [|
            utah_piece.rotation.x -= 0.005;
            utah_piece.rotation.y += 0.005;
            utah_piece.rotation.z -= 0.005;
        |]
    =]


    scene splash_scene [=
        three_object[] objs = [
            set_of_pieces,
            light_group
        ]

        camera cam = pent_cam
                    
        next_frame [=
            set_of_pieces.next_frame;
        =]
    =]



    /---- scene viewer ----/ 

    dynamic component scene_viewer(scene s) [=
        width = "100%"
        height = "100%" 
        
        three_component(s) scene_component [=
            style  [| position: absolute; top: 0; left: 0;
                      width: 100%; height: 100%; 
                      margin: 0; padding: 0;
                      z-index: 0;
                   |]
        
            canvas_id = s.name + "_canvas"

            include_scripts[] = [ "/js/lib/three.js", "/js/lib/stats.js" ]
    
            sub_script [|
                stats = new Stats();
                stats.domElement.style.position = 'absolute';
                stats.domElement.style.top = '0px';
                stats.domElement.style.left = (canvasWidth - 80) + 'px';
                [= canvas_container; =].appendChild(stats.domElement);
            |]

            js_function post_render [=
                body [|
                    stats.update();
               |]
            =]
            log("    >>> in scene_component with scene " + s.name);
            
        =]

        if (!s) [=
            redirect scene_not_specified_error(here)
        =]
        
        log("  >> instantiating scene_component with scene " + s.name);
        scene_component;
    =]

    /---- pseudofiles ----/

    js [=
        lib [=
            three [=
                js [=
                    include_file("../../3p/lib/three.js");
                =]
            =]
            stats [=
                js [=
                    include_file("../../3p/lib/stats.min.js");
                =]
            =]
        =]
    =]
    
    /---- dev tools ----/
    
    position mutable_position(position pos) [=
        keep: double x(xx) = xx
        keep: double y(yy) = yy
        keep: double z(zz) = zz
    
        dynamic set_x(xval) = eval(x(: xval :))
        dynamic set_y(yval) = eval(y(: yval :))
        dynamic set_z(yval) = eval(z(: zval :))
        
        set_x(pos.x);
        set_y(pos.y);
        set_z(pos.z);
        
        this;
    =]
    

=]
