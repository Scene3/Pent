/**  pent-console.bento
 *
 *   Game console for Pent.
 *
 *
 **/

site pent [=

    /** Standard console parameters and events **/

    param_key [?]
    static param_key COMMAND = "do"
    static param_key SET_NAME = "name"
    static param_key SET_TYPE = "type"
    static param_key SET_ID = "id"
    static param_key FIRST_PICK = "first"
    static param_key PLAYER = "player"
    static param_key PIECE = "piece"
    static param_key PUT = "put"
    static param_key ROTATE = "rot"
    static param_key FLIP = "flip"
    static param_key TURN = "turn"
    static param_key CONFIRM = "confirm"
         

    /** Standard parameter values.  # means any number.  * means any
     *  string.
     **/
    param_val [?]
    static param_val START = "start"
    static param_val STOP = "stop"
    static param_val BACK = "back"
    static param_val CONTINUE = "continue"
    static param_val CHOOSE = "pick"
    static param_val COMPUTER_PLAYER = "comp"
    static param_val HUMAN_PLAYER = "human"
    static param_val ID = "#"
    static param_val PLAYER_A = "A"
    static param_val PLAYER_B = "B"
    static param_val CELL = "#"
    static param_val NAME = "*"
    static param_val QTR_TURNS = "#"
    static param_val FLIPS = "#" 
    static param_val TURN_NUM = "#"
    static param_val YES = "yes"
    static param_val NO = "no"

    
    /** Allowed parameters in each game state. **/

    param_key[] param_keys = []
    
    static param_keys{} allowed_params = {
        BEFORE_GAME:    [ COMMAND ],
        CHOOSE_PLAYERS: [ COMMAND, CONFIRM, PLAYER, SET_NAME, SET_TYPE, SET_ID ],
        CHOOSE_ORDER:   [ COMMAND, CONFIRM, FIRST_PICK ],
        CHOOSE_TEAM:    [ COMMAND, CONFIRM, TURN, PIECE ],
        PLAY_GAME:      [ COMMAND, CONFIRM, TURN, PIECE, ROTATE, FLIP, PUT ],
        BETWEEN_GAMES:  [ COMMAND ]
    }
        
    /** Allowed values for specific parameters in each game state. **/

    param_val[] param_vals = []
    
    static param_vals{}{} allowed_vals = {
    
        BEFORE_GAME: {
            COMMAND:    [ START ]
        },
        
        CHOOSE_PLAYERS: { 
            COMMAND:    [ CHOOSE, STOP, BACK ],
            PLAYER:     [ PLAYER_A, PLAYER_B ],
            SET_NAME:   [ NAME ],
            SET_TYPE:   [ COMPUTER_PLAYER, HUMAN_PLAYER ],
            SET_ID:     [ ID ]
        },
        
        CHOOSE_ORDER: { 
            COMMAND:    [ STOP, BACK ],
            FIRST_PICK: [ PLAYER_A, PLAYER_B ]
        },
        
        CHOOSE_TEAM: { 
            COMMAND:    [ STOP, BACK ],
            TURN:       [ TURN_NUM ],
            PIECE:      [ ID ]
        },
        
        PLAY_GAME: { 
            COMMAND:    [ STOP ],
            TURN:       [ TURN_NUM ],
            PIECE:      [ ID ],
            PUT:        [ CELL ],
            ROTATE:     [ QTR_TURNS ],
            FLIP:       [ FLIPS ]
        },
        
        BETWEEN_GAMES: {
            COMMAND:    [ CONTINUE, START ]
        }
    }
       
        
    /**
     *  Pent Console logic
     *
     *  The console plays the role of controller.  It assembles and displays
     *  a set of view components depending on the state of game, and also
     *  changes the state of the game in response to events.
     *
     **/

    /** console base class **/
    component console [=
        component_class = "console"
    =]


    /** pent-specific console **/
    dynamic console pent_console(pent_game gm, params{}) [=
        /** the current game **/
        keep: pent_game game = gm
     
        /** parameter shortcuts **/
        command = params{COMMAND}
        set_name = params{SET_NAME}
        set_type = params{SET_TYPE}
        set_id = params{SET_ID}
        first_pick = params{FIRST_PICK}
        selected_player = params{PLAYER}
        selected_piece = params{PIECE}
        position = params{PUT}
        int rotations = (int) params{ROTATE}
        int flips = (int) params{FLIP}
        int turn = (int) params{TURN}
        boolean confirmed = (params{CONFIRM} == YES)
        
        dynamic boolean is_odd(int n) = ((n & 1) == 1)
                
        dynamic boolean a_picks_next = (is_odd(turn) == game.a_picks_first)
        dynamic boolean a_plays_next = (is_odd(turn) != game.a_picks_first)
        

        /---- implementation ----/
        
        /**
         *  State logic.
         *
         *  The state of both the console and the game changes in response to 
         *  events, which arrive via params.  Console state includes player
         *  names and ids, team colors and styles, console configuration, and game
         *  sequence state (won-lost tally, running scores and player order
         *  for the current series of games).  Game state includes the current
         *  phase (game phases are defined in pent-game.bento) as well as the
         *  current turn (for phases that have turns) and the state of the game
         *  board.
         *
         *  The game object itself handles game state changes in response to the
         *  game API. So when the console calls the game API to play a piece, for
         *  example, the game object will determine if the play ends the game,
         *  and if so will change the phase from PLAY_GAME to BETWEEN_GAMES.
         *   
         **/

        if (command == STOP) [=
            if (confirmed) [=
                game.set_phase(BETWEEN_GAMES);
            =]
 
        =] else if (command == BACK) [=
            if (game.phase == CHOOSE_PLAYERS) [=
                game.set_phase(BEFORE_GAME);
            =] else if (game.phase == CHOOSE_ORDER) [=
                game.set_phase(CHOOSE_PLAYERS);
            /-- backing up from Choose Team is only available before the first pick --/
            =] else if (game.phase == CHOOSE_TEAM && game.turn == 1) [=
                game.set_phase(CHOOSE_ORDER);
            =]

        =] else if (command == START) [=
            game.set_phase(CHOOSE_PLAYERS);

        =] else if (command == CONTINUE) [=   
            game.set_phase(CHOOSE_TEAM);

        /---- phase-dependent logic ----/
         
        /-- in the Choose Player phase, we accept name/id choices for either player --/
        =] else if (game.phase == CHOOSE_PLAYERS) [=
            if (selected_player == PLAYER_A) [=
                game.set_player(set_name, set_id, true);
            =] else if (selected_player == PLAYER_B) [=
                game.set_player(set_name, set_id, false);
            =]
       
        =] else if (game.phase == CHOOSE_ORDER) [=
            if (first_pick) [=
                game.set_a_picks_first((first_pick == PLAYER_A));
            =]           
        
        =] else if (game.phase == CHOOSE_TEAM) [=
            if (selected_piece && turn) [=
                if (turn != game.turn) [=
                    redirect error("piece selected out of turn");
                =]
                game.add_piece_by_id(selected_piece);     
            =]
        
        =] else if (game.phase == PLAY_GAME) [=
            if (selected_piece && turn) [=
                if (turn != game.turn) [=
                    redirect error("piece selected out of turn");
                =]
                game.play_piece_by_id(selected_piece, position, a_plays_next);     
                
                if (game.phase == BETWEEN_GAMES) [=
                    // game just ended
                =]
            =]
        =]
         
        pent_player plyr_A = game.player_A
        pent_player plyr_B = game.player_B
         
        /**
         *  UI logic.
         *
         *  Show the appropriate UI given the state:
         *
         *     -- the appropriate chooser panel if choosing players, 
         *        teams or who goes first  
         *
         *     -- title and game board if playing a game
         *
         *     -- "game over" splash screen if between games
         *   
         **/
         
        if (game.phase == CHOOSE_PLAYERS) [=
            log("console showing choose players panel"); 
            choose_players_panel(game);
        =] else if (game.phase == CHOOSE_ORDER) [=
            log("console showing choose order panel"); 
            choose_order_panel(game);
        =] else if (game.phase == CHOOSE_TEAM) [=
            log("console showing choose team panel"); 
            choose_team_panel(game);
        =] else if (game.phase == PLAY_GAME) [=
            log("console showing game " + game.id + " between " + plyr_A.name + " and " + plyr_B.name); 
            game_panel(game);
        =] else if (game.phase == BETWEEN_GAMES) [=
            log("console showing game over screen"); 
            game_over_panel;
        =]
  
    =]

    /**
     *  Pent Console UI
     *
     **/

    pent_console_style [|

        .console_title {
            color: #111155;
            padding-top: 0.5rem;
            padding-bottom: 0.5rem;
            text-align: center;
            font-weight: bold;
            font-size: 1.33rem;
            font-family: Helvetica, Arial, Geneva, sans-serif;
        }

        .panel_title {
            color: #111155;
            text-align: center;
            font-weight: bold;
            font-size: 1.125rem;
            font-family: Helvetica, Arial, Geneva, sans-serif;
        }
        
        
        .console {
            padding: 0.5rem 2rem;
            background-color: #66CCCC;
            color: #110C0F;
            font-family: Helvetica, Arial, Geneva, sans-serif;
        }
        
        .player_panel {
            border-style: groove;
            border-width: 0.125rem;
            padding: 1rem 2rem;
        }

        .choose_players_panel table {
            width: 100%;
        }

        .choose_players_panel radiobutton {
            width: 100%;
        }
        
    
    |]


    dynamic component panel_title(title) [=
        component_class = owner.type
        title;
    =]

    dynamic panel_title(*) console_title(title) [/]

    component console_panel [=
        component_class [| 
            console_panel [= owner.type; =]
        |]
    =]
    

    console_panel chooser_panel [=
        component_class [|
            console_panel chooser_panel [= owner.type; =]
        |]
        
        title [/]

        field_ids[] = []
        submit_params{} = {} 
        
        if (title) [=
            console_title(title);
        =]
        
        sub;
        
        [| <div class="centered_div"> |]
        [| <table><tr><td> |]
        button("back", "Back");
        [| </td><td> |]
        submit_button("choose", "Ok", "/" + this_component.id, field_ids, submit_params);
        [| </td></tr></table></div> |]
        
    =]

    chooser_panel choose_players_panel(pent_game game) [=
        title = "Choose Players"
        
        dynamic component player_panel(boolean is_player_A) [=
             component_class = owner.type

             pent_player player = is_player_A ? game.player_A : game.player_B
             title = is_player_A ? "Player A" : "Player B"
             radio_group = is_player_A ? "player_A_type" : "player_B_type"
        
             [| <table><tr><td colspan="2"> |]
             
             panel_title(title);

             [| </td></tr><tr><td><div style="text-align: center"> |]
             radiobutton(radio_group, "Human", true, "human");
             [| </div></td><td><div style="text-align: center"> |]
             radiobutton(radio_group, "Computer", false, "computer");

             [| </div></td></tr><tr><td>Name:</td><td> |]
             
             player.name;
             
             [| </td></tr></table> |]
             
        =]
        
        [| <table><tr><td> |]
        
        player_panel(true);
        
        [| </td><td> |]
        
        player_panel(false);
        
        [| </td></tr></table> |]
    
    =]

    chooser_panel choose_order_panel(pent_game game) [=
       title = "Who Goes First?"
    =]

    chooser_panel choose_team_panel(pent_game game) [=
        title = "Choose Teams"
    
    =]

    console_panel game_panel(pent_game game) [=
        title = game.player_A.name + " vs. " + game.player_B.name;    
        board_view(game);
    =]
    
    console_panel game_over_panel [=
    
    =]
=]
